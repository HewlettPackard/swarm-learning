#!/usr/bin/env bash

##################################################################
## (C)Copyright 2021, 2022 Hewlett Packard Enterprise Development LP
## Licensed under the Apache License, Version 2.0 (the "License"); you may
## not use this file except in compliance with the License. You may obtain
## a copy of the License at
##
##    http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
## WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
## License for the specific language governing permissions and limitations
## under the License.
##################################################################

###############################################################
# Script to start SWOP container
###############################################################

## EXAMPLES
## --------
##
##  1. SWOP, with user provided ID
##      run-swop                                                               \
##          --key=/tmp/id/swop-key.pem                                         \
##          --cert=/tmp/id/swop-certchain.pem                                  \
##          --capath=/tmp/id/ca/capath                                         \
##          --usr-dir=/home/user/swop-profiles                                 \
##          --profile-file-name=swop-profile.yaml                                                                
##
##  2. SWOP, with SPIFFE ID
##      The value to this variable "swarm_node_type" is the custom name provided
##      by the user while creating a registration entry inside spire-server.
##
##      run-swop                                                               \
##          --socket-path spire-agent                                          \
##          -e swarm_node_type=swop                                            \
##          --usr-dir=/home/user/swop-profiles                                 \
##          --profile-file-name=swop-profile.yaml                                                     

progName=$(basename "${0}")
progDir=$(realpath $(dirname "${0}"))

# Source a bunch of code that is common to all our scripts.
source "${progDir}/common"

funcCallOrder=("Common" "Docker" "APLS" "UserID" "SpiffeID" "Component")

# Used by onCommonBatchEnd and printCommonUsage.
defaultImageName="${swarmDockerHub}/${swarmOrg}/${swopRepoName}"
defaultImageTag="${swarmVer}"

# varibles used with in the container
containerUsrDir="/platform/swarm/usr"
containerDockerSock="/var/run/docker.sock"

printComponentUsage()
{
    printf -- "--usr-dir <dir>\n"
    printf -- "\tHost directory that should be used as the user directory by\n"
    printf -- "\tthis SWOP node.\n"
    printf -- "\tMandatory Parameter\n\n"

    printf -- "--profile-file-name <swop-profile file>\n"
    printf -- "\tThis file should be located inside the user directory, at the top-level itself.\n"
    printf -- "\tMandatory Parameter\n\n" 

    printf -- "--docker-socket-file <docker socket file>\n"
    printf -- "\tname of docker sock file.\n"
    printf -- "\tDefault: ${containerDockerSock}\n\n"

    printf -- "--docker-group-id <numeric group-id>\n"
    printf -- "\tnumeric group id of the docker group \n"
    printf -- "\tthe docker group id to be used for SWOP user\n"
    printf -- "\tDefault: Default docker group id\n\n"    

    printf -- "--swop-uid <numeric user-id>\n"
    printf -- "\tnumeric user id of the user \n"
    printf -- "\tthe user id to be used for SWOP user\n"
    printf -- "\tDefault: invoking user id\n\n" 

    printf -- " NOTE: \n"
    printf -- " Usage of all the below SN related options --sn-ip, --sn-api-port \n"
    printf -- " and --sn-api-service are conditionally mandatory. Options specified \n"
    printf -- " in swop profile takes precedence over these options in run swop script \n"
    printf -- " Specifying these options either in swop profile or as run swop arguments is mandatory. \n\n"

    printf -- "--sn-ip <IP address or DNS name>\n"
    printf -- "\tThe IP address or DNS name of the host system on which the\n"
    printf -- "\tSwarm Network node with which this Swarm Learning node must.\n"
    printf -- "\tassociate, is running.\n"
    printf -- "\tDefault: None\n\n"

    printf -- "--sn-api-port <port number>\n"
    printf -- "\tHost port for the API Server of the associated Swarm Network node.\n"
    printf -- "\tDefault: None\n\n"

    printf -- "--sn-api-service <Fully Qualified Domain Name[:port]>\n"
    printf -- "\tFQDN and optional port for the API Service of the associated Swarm Network node.\n"
    printf -- "\tDefault: None\n\n"

    return 0
}


processComponentBatchOpt()
{
    local sidecar="${1}"        # Ignored.
    local origParam="${2}"
    local opt="${3}"
    local optarg="${4}"

    case "${opt}" in
        --usr-dir) checkAndAssign "${opt}" "${optarg}";;            
        --profile-file-name) checkAndAssign "${opt}" "${optarg}";;
        --docker-socket-file)
            checkAndAssign "${opt}" "${optarg}"
            dockerSocketFile="$(realpath -m "${optarg}")"
            [[ ! -S "${dockerSocketFile}" ]] && error "${opt}: ${optarg}: bad docker socket file"
            ;;            
        --docker-group-id) 
            checkAndAssign "${opt}" "${optarg}"
            re='^[0-9]+$'
            [[ ! "${optarg}" =~ ${re} ]] && error "${opt}: ${optarg}: bad docker group-id"
            ;;
        --swop-uid) 
            checkAndAssign "${opt}" "${optarg}"
            re='^[0-9]+$'
            [[ ! "${optarg}" =~ ${re} ]] && error "${opt}: ${optarg}: bad user id"
            ;;
        --sn-@(api-@(port|service)|ip))
            checkAndAssign "${opt}" "${optarg}";;
        *) unprocessedOpts+=("${origParam}"); nShift=1;;
    esac

    return 0
}


onTrainEnd()
{   
    [[ -z "${profileFileName}" ]] && error "mandatory parameter --profile-file-name not specified"
    [[ -z "${usrDir}" ]] && error "mandatory parameter --usr-dir not specified"

    # check if directory exists
    [[ ! -d "$(realpath "${usrDir}")" ]] && error "--usr-dir: ${usrDir}: bad path"

    # check if profile file exists
    [[ ! -f "${usrDir}/${profileFileName}" ]] && error "--profile-file-name: ${profileFileName}: bad profile file"

    [[ -n "$(realpath "${usrDir}")" ]] && appendArrayVar "" dockerOpts            \
        "--volume="$(realpath "${usrDir}")":${containerUsrDir}:rw"

    # If dockerSocketFile variable is empty and container runtime is podman try to set
    # dockerSocketFile automatically from `podman info` command
    # else set it to default path of docker runtime
    if [[ -z ${dockerSocketFile} ]] && command -v podman &>/dev/null; then
        dockerSocketFile=`podman info --format '{{.Host.RemoteSocket.Path}}'`
    elif [[ -z ${dockerSocketFile} ]]; then
        dockerSocketFile=${containerDockerSock}
    fi

    # -S Checks if socket exists and is of socket type
    [[ -S "${dockerSocketFile}" ]] && appendArrayVar "" dockerOpts  \
        "--volume=${dockerSocketFile}:${containerDockerSock}:rw"

    # If not passed assign the invoking user as the SWOP_UID
    [[ -z "${swopUid}" ]] && swopUid=$(id -u)
    # Default the group id of the user running the container to the current user group id.
    local userGroupId=$(id -g) #Gets the primary group id of the current user.
    # If not the current user, userGroupId will be the primary group id of the swopUid
    [[ ${swopUid} -ne $(id -u) ]] && userGroupId=$(id -g ${swopUid})

    # If not passed, get the docker group id using getent group docker command
    [[ -z "${dockerGroupId}" ]] && dockerGroupId=$(getent group docker | cut -d':' -f3)


    appendArrayVar "" dockerOpts                    \
        "--env=SWOP_UID=${swopUid}"                 \
        "--env=SWOP_GID=${userGroupId}"             \
        "--env=SWOP_DOCKER_GID=${dockerGroupId}"    \
        "--env=SWOP_PROFILE=${profileFileName}"

    [[ -n "${snIp}" ]] &&           \
        appendArrayVar "" dockerOpts "--env=SN_NODE_IP=${snIp}"
    [[ -n "${snApiPort}" ]] &&      \
        appendArrayVar "" dockerOpts "--env=SN_API_SERVER_PORT=${snApiPort}"
    [[ -n "${snApiService}" ]] &&   \
        appendArrayVar "" dockerOpts "--env=SN_API_SERVICE=${snApiService}"

    cmd+=("${unprocessedOpts[@]}")
    unprocessedOpts=()

    return 0
}


main "${@}"
