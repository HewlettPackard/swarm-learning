#!/usr/bin/env bash

######################################################################
## (C)Copyright 2022 Hewlett Packard Enterprise Development LP
######################################################################


## runs 1-SN, 1-SL, 1-SWOP and 1-SWCI with:
##  a. sn-1 api: service
##  b. sn-1 p2p: service
##  c. sl-1 fs: service

# All examples assumes APLS is already running. User needs to pass this IP accordingly
APLS_IP=$1
[[ -z "$1" ]] && { echo "APLS IP is empty" ; exit 1; }
echo "APLS IP: "${APLS_IP}

Host_1_IP=$2
[[ -z "$2" ]] && { echo "IP address of the Host 1 is empty" ; exit 1; }
echo "HOST 1 IP: "${Host_1_IP}

Host_2_IP=$3
[[ -z "$3" ]] && { echo "IP address of the Host 2 is empty" ; exit 1; }
echo "HOST 2 IP: "${Host_2_IP}

# This is the DNS IP of the host machine. In this example, all swarm contianers including ML container
# will use Bind9 as its only DNS server for name resolution. Especially, when we have usecase like cifar 
# (refer cifar.py file from the model directory of this example) wherein tensorflow downloads the data from 
# the internet using tensorflow.keras.datasets.cifar10.load_data() method. We need to use host machine's DNS 
# server for proper name resolution for this external call that downloads the data. Hence, we pass this argument
# to start ML container to use both Bind9 DNS IP as well as Host Machines DNS IP.  
Host_1_DNS_IP=$4
[[ -z "$4" ]] && { echo "DNS IP of the current host is empty" ; exit 1; }
echo "DNS IP of the current host : "${Host_1_DNS_IP}
echo "SL and ML contianers will now use the both Bind9 contianer IP and current host DNS IP as its DNS IP's for name resolution."


# User logged in the another host. If not passed it will be default user. 
[[ -n "${5}" ]] && Host_2_USER=${5} || Host_2_USER=""

# Directory path of this repository on the another host. If not passed script assumes default installation directory of swarm. 
[[ -n "${6}" ]] && Host_2_INSTALL_DIR=${6} || Host_2_INSTALL_DIR="/opt/hpe/swarm-learning"

# A non-default(custom) bridge network with which containers connect. This has been introduced
# to start the containers with fixed IP addresses. 
Network_Name=$7
[[ -z "$7" ]] && { echo "The non-default bridge network is empty" ; exit 1; }
echo "Network Name: "${Network_Name}


# This step will also ensure if in correct directory
if [[ -f "$(pwd)/scripts/bin/common" ]]
then
    # Pulling swarm images version without using entire common file.
    swarmVersion=$(grep -m1 swarmVer scripts/bin/common | cut -c 11- | cut -d '"' -f1)
    echo "Swarm Version : ${swarmVersion}"
else
    echo "It is mandatory to run these scripts in the base(swarm-learning) directory of this repository. Please cd(change directory) to base directory."
    exit 1; 
fi

#Run Pre-requisites
./examples/reverse-proxy/cifar10/run-prerequisites 1
# Check the outcome of pre-requisite script and proceed
if [[ $? -ne 0 ]]
then
    exit 1;
fi


reverseProxyDir=$(pwd)/examples/reverse-proxy
reverseProxyCifarDir=$(pwd)/examples/reverse-proxy/cifar10
workingDir=$(pwd)/workspace/reverse-proxy/cifar10

# Check if file exists  
Host_2_Cert_Path="${Host_2_INSTALL_DIR}"/workspace/reverse-proxy/cifar10/cert/ca/capath/ca-2-cert.pem


# Wait and Transfer certificates between hosts
Host2CertExists="false"
while [ "${Host2CertExists}" = "false" ]
do
    echo "Waiting for the user to start 'run-on-host-2' script on host 2 machine"
    sleep 30
    # Checking if certificate is available on host-2
    if [[ "${Host_2_USER}" = "" ]]
    then
        ssh ${Host_2_IP} [[ -f "${Host_2_Cert_Path}" ]]
    else
        ssh ${Host_2_USER}@${Host_2_IP} [[ -f "${Host_2_Cert_Path}" ]]
    fi
    # Checking if ssh command went through successfully
    if [[ $? -eq 0 ]]
    then
        Host2CertExists="true"
    fi

    echo "Host2CertExists:"${Host2CertExists}
    # If certificate on the host-2 exists, then copy the file from host 2 to host 1 ca path 
    if [ "$Host2CertExists" = "true" ]
    then
        if [[ "${Host_2_USER}" = "" ]]
        then
            scp ${Host_2_IP}:${Host_2_Cert_Path} "${workingDir}"/cert/ca/capath
        else
            scp ${Host_2_USER}@${Host_2_IP}:${Host_2_Cert_Path} "${workingDir}"/cert/ca/capath
        fi
        # Checking if SCP command went through successfully
        if [[ $? -eq 0 ]]
        then
            echo "Certificate transfer completed."
        fi
    fi
done

build()
{
    # Build the nginx image.
    docker build                                        \
        -t nginx:"${swarmVersion}"                      \
        --build-arg http_proxy="${http_proxy}"          \
        --build-arg https_proxy="${https_proxy}"        \
        --build-arg no_proxy="${no_proxy}"              \
        -                                               \
        < "${reverseProxyDir}/common/Nginx-Dockerfile"
    [[ $? -ne 0 ]] && exit 1


    # Build the bind image.
    docker build                                        \
        -t bind9:"${swarmVersion}"                      \
        --build-arg http_proxy="${http_proxy}"          \
        --build-arg https_proxy="${https_proxy}"        \
        --build-arg no_proxy="${no_proxy}"              \
        -                                               \
        < "${reverseProxyDir}/common/Bind-Dockerfile"
    [[ $? -ne 0 ]] && exit 1

    return 0
}


# Alters the nginx.conf file according to the requirements of this cifar10 example.
# Registers the IP addresses to specific FQDN names within BIND9 (DNS Server)
registerIP()
{
    sed -f - "${reverseProxyCifarDir}/nginx-on-host-1.conf" > "${workingDir}/nginx.conf" << _EOF
s/<sn-1-ip>/${SN_1_IP}/g
s/<sl-1-ip>/${SL_1_IP}/g
s/<sl-2-ip>/${SL_2_IP}/g
_EOF

    # Services.
    docker exec "${1}" add-dns -d api.sn-1.swarm -i ${NGINX_IP}
    docker exec "${1}" add-dns -d p2p.sn-1.swarm -i ${Host_1_IP}
    docker exec "${1}" add-dns -d fs.sl-1.swarm -i ${NGINX_IP}
    docker exec "${1}" add-dns -d fs.sl-2.swarm -i ${NGINX_IP}

    docker exec "${1}" add-dns -d api.sn-2.swarm -i ${Host_2_IP}
    docker exec "${1}" add-dns -d p2p.sn-2.swarm -i ${Host_2_IP}
    docker exec "${1}" add-dns -d fs.sl-3.swarm -i ${Host_2_IP}
    docker exec "${1}" add-dns -d fs.sl-4.swarm -i ${Host_2_IP}
    return 0
}


# Starts the BIND9 container to serve as DNS server
startBind9Server()
{
    docker run                      \
        -d                          \
        --name=swarm-bind9          \
        --network=${Network_Name}   \
        -e no_proxy="${no_proxy}"   \
        bind9:${swarmVersion}       \
        -d swarm

    return 0
}

# Starts the NGINX container with the desired nginx.conf configuration
startNginx()
{
    docker run                                                          \
        -d                                                              \
        --name=nginx                                                    \
        --network=${Network_Name}                                       \
        --ip=${NGINX_IP}                                                \
        -v ${workingDir}/nginx.conf:/etc/nginx/nginx.conf               \
        -e no_proxy="${no_proxy}"                                       \
        -p 443:443                                                      \
        nginx:${swarmVersion}

    return 0
}

setNoProxy()
{
    no_proxy=".swarm,${no_proxy}"
    return 0
}

setNoProxy
build
startBind9Server

# Here we assume no other user creates any conflicting containers
BIND9_IP=$(docker exec swarm-bind9 hostname -I | cut -d' ' -f1)
octet123="$(echo "${BIND9_IP}" | cut -d'.' -f1-3)"
octet4="$(echo "${BIND9_IP}" | cut -d'.' -f4)"
# Incrementing the bindIP and assigning these IP's to 
# respective components
((octet4+=1))
NGINX_IP="${octet123}.${octet4}"
((octet4+=1))
SN_1_IP="${octet123}.${octet4}"
((octet4+=1))
SWOP_1_IP="${octet123}.${octet4}"
((octet4+=1))
SWCI_IP="${octet123}.${octet4}"
((octet4+=1))
SL_1_IP="${octet123}.${octet4}"
((octet4+=1))
ML_1_IP="${octet123}.${octet4}"
((octet4+=1))
SL_2_IP="${octet123}.${octet4}"
((octet4+=1))
ML_2_IP="${octet123}.${octet4}"

registerIP swarm-bind9
startNginx


# Modifies the swop profile in the workspaace to change the fields like <CURRENT-PATH>, <APLS-IP> and <DNS>
# Also Modifies the <CURRENT-PATH> in swarm_cifar10_task file
sed -i "s+<CURRENT-PATH>+$(pwd)+g" "${workingDir}"/swop/swop1_profile.yaml
sed -i "s+<NETWORK-NAME>+${Network_Name}+g" "${workingDir}"/swop/swop1_profile.yaml
sed -i "s+<APLS-IP>+${APLS_IP}+g" "${workingDir}"/swop/swop1_profile.yaml
sed -i "s+<Bind9-IP>+${BIND9_IP}+g" "${workingDir}"/swop/swop1_profile.yaml
sed -i "s+<Host-DNS-IP>+${Host_1_DNS_IP}+g" "${workingDir}"/swop/swop1_profile.yaml
sed -i "s+<SL-IP-1>+${SL_1_IP}+g" "${workingDir}"/swop/swop1_profile.yaml
sed -i "s+<SL-IP-2>+${SL_2_IP}+g" "${workingDir}"/swop/swop1_profile.yaml
sed -i "s+<ML-IP-1>+${ML_1_IP}+g" "${workingDir}"/swop/swop1_profile.yaml
sed -i "s+<ML-IP-2>+${ML_2_IP}+g" "${workingDir}"/swop/swop1_profile.yaml

# Start Swarm components.
# --dns is the DNS IP to which the container will interact to resolve ip addresses
# --sn-api-service and sn-p2p-service are the FQDN names used within reverse proxy
# to overcome the usage of ports.
echo "############### Starting Sentinel SN ##################"
"./scripts/bin/run-sn"                                  \
    -d                                                  \
    --name=sn-1                                         \
    --hostname=sn-1                                     \
    --dns=${BIND9_IP}                                   \
    --network=${Network_Name}                           \
    --ip=${SN_1_IP}                                     \
    --sn-api-service=api.sn-1.swarm                     \
    --sn-p2p-service=p2p.sn-1.swarm:30303               \
    --sentinel                                          \
    --apls-ip=${APLS_IP}                                \
    -e no_proxy="${no_proxy}"                           \
    --key=${workingDir}/cert/sn-1-key.pem               \
    --cert=${workingDir}/cert/sn-1-cert.pem             \
    --capath=${workingDir}/cert/ca/capath               
[[ $? -ne 0 ]] && exit 1

# wait for Sentinel API service to start
retries=1
isUp=''
while [[ ${isUp} != "OK" ]]
do
    isUp=`curl -sk --noproxy ${SN_1_IP} --cert ${workingDir}/cert/sn-1-cert.pem --key ${workingDir}/cert/sn-1-key.pem "https://${SN_1_IP}:30304/is_up"`
    if [[ ${retries} -gt 20 ]] 
    then
        echo "Exiting: Failed to start Sentinel API service within the time limit of 10 minutes" 
        exit 1;
    fi 
    if [[ ${isUp} != "OK" ]]
    then
        echo "Waiting for the Sentinel API service to start ....."
        retries=$((retries+1)) 
        sleep 30 
    fi
done

if [[ ${isUp} == "OK" ]]
then
    echo "Sentinel API service is Started"
fi


echo "#################### Starting SWOP ####################"
"./scripts/bin/run-swop"                                \
    -d                                                  \
    --name=swop-1                                       \
    --dns=${BIND9_IP}                                   \
    --network=${Network_Name}                           \
    --ip=${SWOP_1_IP}                                   \
    --sn-api-service=api.sn-1.swarm                     \
    --apls-ip=${APLS_IP}                                \
    -e no_proxy="${no_proxy}"                           \
    -e http_proxy=                                      \
    -e https_proxy=                                     \
    -e SWOP_KEEP_CONTAINERS=1                           \
    --usr-dir=${workingDir}/swop                        \
    --profile-file-name=swop1_profile.yaml              \
    --key=${workingDir}/cert/swop-1-key.pem             \
    --cert=${workingDir}/cert/swop-1-cert.pem           \
    --capath=${workingDir}/cert/ca/capath               
 

echo "#################### Starting SWCI ####################"
"./scripts/bin/run-swci"                                \
    --rm=false                                          \
    -dt                                                 \
    --name=swci-1                                       \
    --dns=${BIND9_IP}                                   \
    --network=${Network_Name}                           \
    --ip=${SWCI_IP}                                     \
    --apls-ip=${APLS_IP}                                \
    -e no_proxy="${no_proxy}"                           \
    -e http_proxy=                                      \
    -e https_proxy=                                     \
    --usr-dir=${workingDir}/swci                        \
    --init-script-name=swci-init                        \
    --key=${workingDir}/cert/swci-1-key.pem             \
    --cert=${workingDir}/cert/swci-1-cert.pem           \
    --capath=${workingDir}/cert/ca/capath               